select(cran,ip_id,package,country)
5:20
select
select(cran, r_arch:country)
select(cran, country:r_arch)
print
cramn
cran
select(cran,-time)
-5:20
-(5:20)
select(x:size)
select(-(x:size)
select(-(x:size))
select(-(x:size))
select()
select()
select(
)
select
select(cran,-(x:size))
select(cran,-(x:size))
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size >= 100500 | r_os == "linux-gnu")
filter(cran, size >= 100500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA,10))
filter(!is.na(c(R.version)))
filter(!is.na(c(R.version)))
filter(!is.na(c(R.version)))
filter(!is.na(c(R.version)))
filter(!is.na(c(R.version)))
filter(!is.na(c(R.version)))
filter(!is.na(c(R.version))
filter(!is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, r_version(desc), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))\
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
group_by()
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
save
save()
submit()
submit(0)
submit()
save
save()
submit()
submit()
submit()
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
submit()
print(tbl,pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
save
save()
library(dplyr)
dplyr
dplyr()
swirl()
library(swirl)
swirl()
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(desc(count))
desc()
?desc
top_counts_sorted<-arrange(top_counts,desc(count))
view()
View()
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique()))
top_unique_sorted<-arrange(top_unique,desc(unique)
)
View(top_unique_sorted)
submit()
submit()
submit()
View()
View(result3)
script_vals_identical()
sub,it()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,key,sex_class, value,count)
res<-gather(students2,key=sex_class, value=count)
res<-gather(students2,key=sex_class, value=count,-grade)
res
?separate()
?separate
separate(data = res, col = sex_class, into = c("sex","class")
)
submit()
students3
submit()
?spread()
?spread
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
students4
students4
submit()
submit()
submit()
submit()
submit()
View(passed)
passed
failed
mutate(passed,status,"passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
now()
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
parse(25081985)
parse 25081985
parse "25081985""
parse "25081985"
parse (25081985)
parse 25081985
parse 2508198
parse_date_time(2508198)
parse_date_time(2508198,myd)
dmy(25081985)
ymd("192012")
ymd(//"192012")
ymd(/"192012"/)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update()
update
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc
depart<-nyc+days(2)
depart
update(hrs:17,minutes:34)
update(depart,hrs:17,minutes:34)
update(depart,hours:17,minutes:34)
update(depart,hours:17,minutes:34)
update(depart,hours=17,minutes=34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+add(hours=15,minutes=50)
add
?add
add()
arrive<-depart+add(hours=15,minutes=50)
rrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart+hours(15)+minutes(50)
arrive <- depart+hours(15)+minutes(50)
arrive <- depart+hours(15)+minutes(50)
arrive <- depart+hours(15)+minutes(50)
arrive <- depart+hours(15)+minutes(50)
arrive <- depart+hours(15)+minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive
arrive<-update(depart + hours(15) + minutes(50))
arrive <- depart + hours(15) + minutes(50)
arrive <-depart + hours(15) + minutes(50)
arrive <-depart+hours(15)+minutes(50)
arrive <- depart + hours(15) + minutes(50)
depart
arrive<-depart+hours(15)+minutes(50)
?
)
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive<-depart+hours=15+minutes=50
arrive<-depart+hours(15)+minutes(50)
arrive
info()
skio()
skip()
skip()
skip()
info?
info()
next()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
Sys.setFileTime()
Sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
Sys.getlocale("LC_TIME")
skip()
skip()
syte
system
arrive <- depart + hours(15) + minutes(50)
info()
bye()
swirl()
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz()
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?interval()
?interval
how_long<-interval(last_time:arrive)
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
swirl
swirl()
library.swirl()
library(swirl)
swirl()
hist(east$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "East")
plot(west$latitude, east$pm25, main = "East")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting)
)
with(faithful, plot(eruptions, waiting)
)
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
title(main = "Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy()
dev.copy(png, file = "geyserplot.png")
dev.off()
with(cars)
with(cars,plot(speed,distance))
with(cars,plot(speed,dist))
head(cars)
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
head(mpg$model)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
Under 25; Between 60 and 75; Over 150; Over 100
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
par()
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
with(airquality, plot(Wind, Ozone))
plot(airquality$Wind, type="n",airquality$Ozone)
title("Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
load("C:/Users/User/Desktop/Coursera/Course1/Assignment/repdata%2Fdata%2Factivity/activity.csv")
dt <- read.csv("activity.csv", header = T)
dt <-read.csv("activity.csv", header = T)
setwd("C:/Users/User/Desktop/Coursera/Course1/Assignment/repdata%2Fdata%2Factivity")
dt <-read.csv("activity.csv", header = T)
dim(dt)
str(dt)
tail(dt)
missing_dt <- dt[is.na(dt$steps),]
dim(missing_dt)
dt1 <- dt[!is.na(dt$steps),]
total_number_steps <- with(dt, tapply(steps, as.factor(dt$date), sum, na.rm = T))
hist(total_number_steps, main = "Histogram of total number of steps taken per day", xlab = "Total number of steps")
summary(total_number_steps)
mean_steps <- with(dt1, tapply(steps, dt1$interval, mean))
interval <- levels(as.factor(dt1$interval))
plot(interval, mean_steps, type = "l", main = "Time series plot of the \n average number of steps taken", xlab = "interval", ylab = "Mean steps")
table <- data.frame(mean_steps, interval)
table[table$mean_steps==max(table$mean_steps),][2]
# total number of missing values in the dataset
length(missing_dt$steps)
# in this exercise I am going to replace the missing values by the the average number of steps taken, averaged across all days.
# Using this method we do not affect this data
mean_steps <- with(dt1, tapply(steps, dt1$interval, mean))
missing_dt$steps <- mean_steps
new_dt <- rbind(dt1, missing_dt)
new_dt <- new_dt[order(new_dt$date), ]
total_number_steps2 <- with(new_dt, tapply(steps, as.factor(new_dt$date), sum))
#Make a histogram of the total number of steps taken each day
hist(total_number_steps2, main = "Histogram of total number of steps taken per day", xlab = "Total number of steps")
summary(total_number_steps)
summary(total_number_steps2)
new_dt$days <- weekdays(as.Date(new_dt$date))
# find weekend features in the dataset
weekend_feature <- grep("Saturday|Sunday", new_dt$days, ignore.case = T)
# subset data of the weekend
weekend_dt<-  new_dt[weekend_feature, ]
weekend_dt$weekday <- "weekend"
# subset data of the weekday
weekday_dt <- subset(new_dt,new_dt$days!=weekend_feature)
weekend_dt<-  new_dt[weekend_feature, ]
weekend_dt$weekday <- "weekend"
weekday_dt <- subset(new_dt,new_dt$days!=weekend_feature)
weekend_feature <- grep("Saturday|Sunday", new_dt$days, ignore.case = T)
weekday_dt <- subset(new_dt,new_dt$days!=weekend_feature)
new_dt$days <- weekdays(as.Date(new_dt$date))
weekend_feature <- grep("Saturday|Sunday", new_dt$days, ignore.case = T)
weekend_dt<-  new_dt[weekend_feature, ]
weekend_dt$weekday <- "weekend"
weekday_dt <- subset(new_dt,new_dt$days!=weekend_feature)
weekend_dt<-  new_dt[weekend_feature, ]
weekday_dt$weekday <- "weekday"
new_dt2 <- rbind(weekday_dt, weekend_dt)
weekday_dt$weekday <- "weekday"
new_dt2 <- rbind(weekday_dt, weekend_dt)
mean_number_steps <- aggregate(steps~ interval+weekday, new_dt2, mean)
g <- qplot(interval, steps, data = mean_number_steps, facets = weekday~.)
g + geom_line(size = 1) + ylab("Mean steps") + ggtitle("Average number of steps taken, \n averaged across all weekday days or weekend days ")
weekend_dt<-  new_dt[weekend_feature, ]
weekday_dt <- subset(new_dt,new_dt$days!=weekend_feature)
new_dt2 <- rbind(weekday_dt, weekend_dt)
mean_number_steps <- aggregate(steps~ interval+weekday, new_dt2, mean)
g <- qplot(interval, steps, data = mean_number_steps, facets = weekday~.)
g + geom_line(size = 1) + ylab("Mean steps") + ggtitle("Average number of steps taken, \n averaged across all weekday days or weekend days ")
mean_number_steps <- aggregate(steps~ interval+weekday, new_dt2, mean)
weekday_dt$weekday <- "weekday"
mean_number_steps <- aggregate(steps~ interval+weekday, new_dt2, mean)
weekday_dt <- subset(new_dt,new_dt$days!=weekend_feature)
weekday_dt$weekday <- "weekday"
new_dt2 <- rbind(weekday_dt, weekend_dt)
knitr
knitr()
library(knitr)
knitr_package
library(knitr)
knitr-package
knitr-package
library
library()
knit
library(knit)
load("~/GitHub/RepData_PeerAssessment1/PA1_template.Rmd")
setwd("~/GitHub/RepData_PeerAssessment1")
dir
dir()
